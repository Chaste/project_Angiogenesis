// This file has been generated by Py++.

#include "boost/python.hpp"

#include "flow_headers.hpp"

namespace bp = boost::python;

struct BetteridgeHaematocritSolver_less__3__greater__wrapper : BetteridgeHaematocritSolver< 3 >, bp::wrapper< BetteridgeHaematocritSolver< 3 > > {

    BetteridgeHaematocritSolver_less__3__greater__wrapper(BetteridgeHaematocritSolver<3> const & arg )
    : BetteridgeHaematocritSolver<3>( arg )
      , bp::wrapper< BetteridgeHaematocritSolver< 3 > >(){
        // copy constructor
        
    }

    BetteridgeHaematocritSolver_less__3__greater__wrapper( )
    : BetteridgeHaematocritSolver<3>( )
      , bp::wrapper< BetteridgeHaematocritSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->BetteridgeHaematocritSolver< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        BetteridgeHaematocritSolver< 3 >::Calculate( );
    }

};

struct VesselImpedanceCalculator_less__3__greater__wrapper : VesselImpedanceCalculator< 3 >, bp::wrapper< VesselImpedanceCalculator< 3 > > {

    VesselImpedanceCalculator_less__3__greater__wrapper(VesselImpedanceCalculator<3> const & arg )
    : VesselImpedanceCalculator<3>( arg )
      , bp::wrapper< VesselImpedanceCalculator< 3 > >(){
        // copy constructor
        
    }

    VesselImpedanceCalculator_less__3__greater__wrapper( )
    : VesselImpedanceCalculator<3>( )
      , bp::wrapper< VesselImpedanceCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->VesselImpedanceCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        VesselImpedanceCalculator< 3 >::Calculate( );
    }

};

struct WallShearStressCalculator_less__3__greater__wrapper : WallShearStressCalculator< 3 >, bp::wrapper< WallShearStressCalculator< 3 > > {

    WallShearStressCalculator_less__3__greater__wrapper(WallShearStressCalculator<3> const & arg )
    : WallShearStressCalculator<3>( arg )
      , bp::wrapper< WallShearStressCalculator< 3 > >(){
        // copy constructor
        
    }

    WallShearStressCalculator_less__3__greater__wrapper( )
    : WallShearStressCalculator<3>( )
      , bp::wrapper< WallShearStressCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->WallShearStressCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        WallShearStressCalculator< 3 >::Calculate( );
    }

};

BOOST_PYTHON_MODULE(_chaste_project_Angiogenesis_flow){
    bp::class_< BetteridgeHaematocritSolver_less__3__greater__wrapper >( "BetteridgeHaematocritSolver3", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )(  ))(&::BetteridgeHaematocritSolver< 3 >::Calculate)
            , (void ( BetteridgeHaematocritSolver_less__3__greater__wrapper::* )(  ))(&BetteridgeHaematocritSolver_less__3__greater__wrapper::default_Calculate) )    
        .def( 
            "SetAlpha"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetAlpha )
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetHaematocrit"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetHaematocrit )
            , ( bp::arg("haematocrit") ) )    
        .def( 
            "SetTHR"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetTHR )
            , ( bp::arg("thr") ) );

    bp::class_< FlowSolver< 2 > >( "FlowSolver_less__2__greater_" );

    { //::FlowSolver< 3 >
        typedef bp::class_< FlowSolver< 3 > > FlowSolver3_exposer_t;
        FlowSolver3_exposer_t FlowSolver3_exposer = FlowSolver3_exposer_t( "FlowSolver3", bp::init< >() );
        bp::scope FlowSolver3_scope( FlowSolver3_exposer );
        { //::FlowSolver< 3 >::Create
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< FlowSolver< 3 > > ( *Create_function_type )(  );
            
            FlowSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::FlowSolver< 3 >::Create ) );
        
        }
        { //::FlowSolver< 3 >::SetUp
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUp_function_type)(  ) ;
            
            FlowSolver3_exposer.def( 
                "SetUp"
                , SetUp_function_type( &::FlowSolver< 3 >::SetUp ) );
        
        }
        { //::FlowSolver< 3 >::SetUseDirectSolver
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUseDirectSolver_function_type)( bool ) ;
            
            FlowSolver3_exposer.def( 
                "SetUseDirectSolver"
                , SetUseDirectSolver_function_type( &::FlowSolver< 3 >::SetUseDirectSolver )
                , ( bp::arg("useDirectSolver") ) );
        
        }
        { //::FlowSolver< 3 >::SetVesselNetwork
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            FlowSolver3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::FlowSolver< 3 >::SetVesselNetwork )
                , ( bp::arg("pVesselNetwork") ) );
        
        }
        { //::FlowSolver< 3 >::Solve
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Solve_function_type)(  ) ;
            
            FlowSolver3_exposer.def( 
                "Solve"
                , Solve_function_type( &::FlowSolver< 3 >::Solve ) );
        
        }
        { //::FlowSolver< 3 >::Update
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            FlowSolver3_exposer.def( 
                "Update"
                , Update_function_type( &::FlowSolver< 3 >::Update )
                , ( bp::arg("runSetup")=(bool)(false) ) );
        
        }
        FlowSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< FlowSolver<3> > >();
    }

    bp::class_< VesselImpedanceCalculator_less__3__greater__wrapper >( "VesselImpedanceCalculator3", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::VesselImpedanceCalculator<3>::* )(  ))(&::VesselImpedanceCalculator< 3 >::Calculate)
            , (void ( VesselImpedanceCalculator_less__3__greater__wrapper::* )(  ))(&VesselImpedanceCalculator_less__3__greater__wrapper::default_Calculate) );

    bp::class_< WallShearStressCalculator< 2 > >( "WallShearStressCalculator_less__2__greater_" );

    bp::class_< WallShearStressCalculator_less__3__greater__wrapper >( "WallShearStressCalculator3", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::WallShearStressCalculator<3>::* )(  ))(&::WallShearStressCalculator< 3 >::Calculate)
            , (void ( WallShearStressCalculator_less__3__greater__wrapper::* )(  ))(&WallShearStressCalculator_less__3__greater__wrapper::default_Calculate) );
}
