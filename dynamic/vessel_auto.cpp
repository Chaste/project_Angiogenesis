// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "/home/grogan/Chaste/projects/Angiogenesis/dynamic/header_collections/VesselWrapperHeaderCollection.hpp"

namespace bp = boost::python;

struct NodeFlowProperties_less__3__greater__wrapper : NodeFlowProperties< 3 >, bp::wrapper< NodeFlowProperties< 3 > > {

    NodeFlowProperties_less__3__greater__wrapper(NodeFlowProperties<3> const & arg )
    : NodeFlowProperties<3>( arg )
      , bp::wrapper< NodeFlowProperties< 3 > >(){
        // copy constructor
        
    }

    NodeFlowProperties_less__3__greater__wrapper( )
    : NodeFlowProperties<3>( )
      , bp::wrapper< NodeFlowProperties< 3 > >(){
        // null constructor
    
    }

    virtual ::std::map< std::string, double > GetOutputData(  ) const  {
        if( bp::override func_GetOutputData = this->get_override( "GetOutputData" ) )
            return func_GetOutputData(  );
        else{
            return this->NodeFlowProperties< 3 >::GetOutputData(  );
        }
    }
    
    ::std::map< std::string, double > default_GetOutputData(  ) const  {
        return NodeFlowProperties< 3 >::GetOutputData( );
    }

};

BOOST_PYTHON_MODULE(_chaste_project_PyChaste_vessel){
    bp::class_< std::map< std::string, double > >("map_less__std_scope_string_comma__double__greater_")    
        .def( bp::map_indexing_suite< ::std::map< std::string, double >, true >() );

    bp::class_< NodeFlowProperties_less__3__greater__wrapper >( "NodeFlowProperties3", bp::init< >() )    
        .def( 
            "GetOutputData"
            , (::std::map< std::string, double > ( ::NodeFlowProperties<3>::* )(  )const)(&::NodeFlowProperties< 3 >::GetOutputData)
            , (::std::map< std::string, double > ( NodeFlowProperties_less__3__greater__wrapper::* )(  )const)(&NodeFlowProperties_less__3__greater__wrapper::default_GetOutputData) )    
        .def( 
            "IsInputNode"
            , (bool ( ::NodeFlowProperties<3>::* )(  )const)( &::NodeFlowProperties< 3 >::IsInputNode ) )    
        .def( 
            "IsOutputNode"
            , (bool ( ::NodeFlowProperties<3>::* )(  )const)( &::NodeFlowProperties< 3 >::IsOutputNode ) )    
        .def( 
            "SetIsInputNode"
            , (void ( ::NodeFlowProperties<3>::* )( bool ))( &::NodeFlowProperties< 3 >::SetIsInputNode )
            , ( bp::arg("isInput") ) )    
        .def( 
            "SetIsOutputNode"
            , (void ( ::NodeFlowProperties<3>::* )( bool ))( &::NodeFlowProperties< 3 >::SetIsOutputNode )
            , ( bp::arg("isOutput") ) )    
        .def( 
            "SetUseVelocityBoundaryCondition"
            , (void ( ::NodeFlowProperties<3>::* )( bool ))( &::NodeFlowProperties< 3 >::SetUseVelocityBoundaryCondition )
            , ( bp::arg("useVelocity") ) )    
        .def( 
            "UseVelocityBoundaryCondition"
            , (bool ( ::NodeFlowProperties<3>::* )(  ))( &::NodeFlowProperties< 3 >::UseVelocityBoundaryCondition ) );
}
