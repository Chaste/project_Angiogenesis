// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "indexing_suite/set.hpp"

#include "mesh_headers.hpp"

namespace bp = boost::python;

struct PottsMesh_less__3__greater__wrapper : PottsMesh< 3 >, bp::wrapper< PottsMesh< 3 > > {

    PottsMesh_less__3__greater__wrapper(::std::vector< Node<3> * > nodes, ::std::vector< PottsElement<3> * > pottsElements, ::std::vector< std::set< unsigned int > > vonNeumannNeighbouringNodeIndices, ::std::vector< std::set< unsigned int > > mooreNeighbouringNodeIndices )
    : PottsMesh<3>( nodes, pottsElements, vonNeumannNeighbouringNodeIndices, mooreNeighbouringNodeIndices )
      , bp::wrapper< PottsMesh< 3 > >(){
        // constructor
    
    }

    PottsMesh_less__3__greater__wrapper( )
    : PottsMesh<3>( )
      , bp::wrapper< PottsMesh< 3 > >(){
        // null constructor
    
    }

    virtual void Clear(  ) {
        if( bp::override func_Clear = this->get_override( "Clear" ) )
            func_Clear(  );
        else{
            this->PottsMesh< 3 >::Clear(  );
        }
    }
    
    void default_Clear(  ) {
        PottsMesh< 3 >::Clear( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetCentroidOfElement( unsigned int index ) {
        if( bp::override func_GetCentroidOfElement = this->get_override( "GetCentroidOfElement" ) )
            return func_GetCentroidOfElement( index );
        else{
            return this->PottsMesh< 3 >::GetCentroidOfElement( index );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetCentroidOfElement( unsigned int index ) {
        return PottsMesh< 3 >::GetCentroidOfElement( index );
    }

    virtual unsigned int GetNumElements(  ) const  {
        if( bp::override func_GetNumElements = this->get_override( "GetNumElements" ) )
            return func_GetNumElements(  );
        else{
            return this->PottsMesh< 3 >::GetNumElements(  );
        }
    }
    
    unsigned int default_GetNumElements(  ) const  {
        return PottsMesh< 3 >::GetNumElements( );
    }

    virtual unsigned int GetNumNodes(  ) const  {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->PottsMesh< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) const  {
        return PottsMesh< 3 >::GetNumNodes( );
    }

    virtual double GetSurfaceAreaOfElement( unsigned int index ) {
        if( bp::override func_GetSurfaceAreaOfElement = this->get_override( "GetSurfaceAreaOfElement" ) )
            return func_GetSurfaceAreaOfElement( index );
        else{
            return this->PottsMesh< 3 >::GetSurfaceAreaOfElement( index );
        }
    }
    
    double default_GetSurfaceAreaOfElement( unsigned int index ) {
        return PottsMesh< 3 >::GetSurfaceAreaOfElement( index );
    }

    virtual double GetVolumeOfElement( unsigned int index ) {
        if( bp::override func_GetVolumeOfElement = this->get_override( "GetVolumeOfElement" ) )
            return func_GetVolumeOfElement( index );
        else{
            return this->PottsMesh< 3 >::GetVolumeOfElement( index );
        }
    }
    
    double default_GetVolumeOfElement( unsigned int index ) {
        return PottsMesh< 3 >::GetVolumeOfElement( index );
    }

    unsigned int SolveBoundaryElementMapping( unsigned int index ) const {
        return PottsMesh< 3 >::SolveBoundaryElementMapping( index );
    }

    unsigned int SolveElementMapping( unsigned int index ) const {
        return PottsMesh< 3 >::SolveElementMapping( index );
    }

    virtual unsigned int SolveNodeMapping( unsigned int index ) const {
        if( bp::override func_SolveNodeMapping = this->get_override( "SolveNodeMapping" ) )
            return func_SolveNodeMapping( index );
        else{
            return this->PottsMesh< 3 >::SolveNodeMapping( index );
        }
    }
    
    virtual unsigned int default_SolveNodeMapping( unsigned int index ) const {
        return PottsMesh< 3 >::SolveNodeMapping( index );
    }

};

struct SharedPottsMeshGenerator_less__3__greater__wrapper : SharedPottsMeshGenerator< 3 >, bp::wrapper< SharedPottsMeshGenerator< 3 > > {

    SharedPottsMeshGenerator_less__3__greater__wrapper(SharedPottsMeshGenerator<3> const & arg )
    : SharedPottsMeshGenerator<3>( arg )
      , bp::wrapper< SharedPottsMeshGenerator< 3 > >(){
        // copy constructor
        
    }

    SharedPottsMeshGenerator_less__3__greater__wrapper(unsigned int numNodesAcross, unsigned int numElementsAcross, unsigned int elementWidth, unsigned int numNodesUp=1U, unsigned int numElementsUp=1U, unsigned int elementHeight=1U, unsigned int numNodesDeep=1U, unsigned int numElementsDeep=1U, unsigned int elementDepth=1U, bool startAtBottomLeft=false, bool isPeriodicInX=false, bool isPeriodicInY=false, bool isPeriodicInZ=false )
    : SharedPottsMeshGenerator<3>( numNodesAcross, numElementsAcross, elementWidth, numNodesUp, numElementsUp, elementHeight, numNodesDeep, numElementsDeep, elementDepth, startAtBottomLeft, isPeriodicInX, isPeriodicInY, isPeriodicInZ )
      , bp::wrapper< SharedPottsMeshGenerator< 3 > >(){
        // constructor
    
    }

    SharedPottsMeshGenerator_less__3__greater__wrapper( )
    : SharedPottsMeshGenerator<3>( )
      , bp::wrapper< SharedPottsMeshGenerator< 3 > >(){
        // null constructor
    
    }

    virtual ::boost::shared_ptr< PottsMesh< 3 > > GetMesh(  ) {
        if( bp::override func_GetMesh = this->get_override( "GetMesh" ) )
            return func_GetMesh(  );
        else{
            return this->SharedPottsMeshGenerator< 3 >::GetMesh(  );
        }
    }
    
    ::boost::shared_ptr< PottsMesh< 3 > > default_GetMesh(  ) {
        return SharedPottsMeshGenerator< 3 >::GetMesh( );
    }

};

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::numeric::ublas::c_vector< double, 3 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::set< unsigned int > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<Cell> > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselNode<3> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselSegment<3> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< double > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< unsigned int > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_Angiogenesis_mesh){
    { //::std::vector< unsigned int >
        typedef bp::class_< std::vector< unsigned int > > vector_less__unsigned_int__greater__exposer_t;
        vector_less__unsigned_int__greater__exposer_t vector_less__unsigned_int__greater__exposer = vector_less__unsigned_int__greater__exposer_t( "vector_less__unsigned_int__greater_" );
        bp::scope vector_less__unsigned_int__greater__scope( vector_less__unsigned_int__greater__exposer );
        vector_less__unsigned_int__greater__exposer.def( bp::indexing::vector_suite< std::vector< unsigned int > >() );
    }

    { //::std::vector< std::vector< unsigned int > >
        typedef bp::class_< std::vector< std::vector< unsigned int > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< unsigned int > > >() );
    }

    { //::std::vector< std::vector< double > >
        typedef bp::class_< std::vector< std::vector< double > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< double > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<Cell> > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<Cell> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<Cell> > > >() );
    }

    { //::std::vector< std::set< unsigned int > >
        typedef bp::class_< std::vector< std::set< unsigned int > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::set< unsigned int > > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::numeric::ublas::c_vector<double, 3> >
        typedef bp::class_< std::vector< boost::numeric::ublas::c_vector<double, 3> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::numeric::ublas::c_vector<double, 3> > >() );
    }

    { //::std::vector< PottsElement<3> * >
        typedef bp::class_< std::vector< PottsElement<3> * > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< PottsElement<3> * > >::with_policies(bp::return_internal_reference< >()) );
    }

    { //::std::vector< Node<3> * >
        typedef bp::class_< std::vector< Node<3> * > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< Node<3> * > >::with_policies(bp::return_internal_reference< >()) );
    }

    { //::std::set< unsigned int >
        typedef bp::class_< std::set< unsigned int > > set_less__unsigned_int__greater__exposer_t;
        set_less__unsigned_int__greater__exposer_t set_less__unsigned_int__greater__exposer = set_less__unsigned_int__greater__exposer_t( "set_less__unsigned_int__greater_" );
        bp::scope set_less__unsigned_int__greater__scope( set_less__unsigned_int__greater__exposer );
        set_less__unsigned_int__greater__exposer.def( bp::indexing::set_suite< std::set< unsigned int > >() );
    }

    { //::DiscreteContinuumMesh< 3, 3 >
        typedef bp::class_< DiscreteContinuumMesh< 3, 3 >, boost::noncopyable > DiscreteContinuumMesh3_3_exposer_t;
        DiscreteContinuumMesh3_3_exposer_t DiscreteContinuumMesh3_3_exposer = DiscreteContinuumMesh3_3_exposer_t( "DiscreteContinuumMesh3_3", bp::init< >() );
        bp::scope DiscreteContinuumMesh3_3_scope( DiscreteContinuumMesh3_3_exposer );
        { //::DiscreteContinuumMesh< 3, 3 >::Create
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMesh< 3, 3 >::Create ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetConnectivity
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetConnectivity_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetConnectivity"
                , GetConnectivity_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetConnectivity ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementRegionMarkers
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetElementRegionMarkers_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementRegionMarkers"
                , GetElementRegionMarkers_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementRegionMarkers ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetNodeLocations
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< double > > ( exported_class_t::*GetNodeLocations_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetNodeLocations"
                , GetNodeLocations_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetNodeLocations ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::boost::shared_ptr< Part< 3 > > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::vtkSmartPointer< vtkPolyData > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetDomain )
                , ( bp::arg("rPathToStl") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetHoles
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetHoles_function_type)( ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetHoles"
                , SetHoles_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetHoles )
                , ( bp::arg("holes") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetMaxElementArea
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxElementArea_function_type)( double ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetMaxElementArea"
                , SetMaxElementArea_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetMaxElementArea )
                , ( bp::arg("maxElementArea") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetRegionMarkers
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegionMarkers_function_type)( ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetRegionMarkers"
                , SetRegionMarkers_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetRegionMarkers )
                , ( bp::arg("regionMarkers") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::Update
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "Update"
                , Update_function_type( &::DiscreteContinuumMesh< 3, 3 >::Update ) );
        
        }
        DiscreteContinuumMesh3_3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMesh<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< TetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractTetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractMesh< 3, 3 > > >();
    }

    { //::PottsMesh< 3 >
        typedef bp::class_< PottsMesh_less__3__greater__wrapper, boost::noncopyable > PottsMesh3_exposer_t;
        PottsMesh3_exposer_t PottsMesh3_exposer = PottsMesh3_exposer_t( "PottsMesh3", bp::init< std::vector< Node<3> * >, std::vector< PottsElement<3> * >, std::vector< std::set< unsigned int > >, std::vector< std::set< unsigned int > > >(( bp::arg("nodes"), bp::arg("pottsElements"), bp::arg("vonNeumannNeighbouringNodeIndices"), bp::arg("mooreNeighbouringNodeIndices") )) );
        bp::scope PottsMesh3_scope( PottsMesh3_exposer );
        PottsMesh3_exposer.def( bp::init< >() );
        { //::PottsMesh< 3 >::AddElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddElement_function_type)( ::PottsElement< 3 > * ) ;
            
            PottsMesh3_exposer.def( 
                "AddElement"
                , AddElement_function_type( &::PottsMesh< 3 >::AddElement )
                , ( bp::arg("pNewElement") ) );
        
        }
        { //::PottsMesh< 3 >::Clear
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            typedef void ( PottsMesh_less__3__greater__wrapper::*default_Clear_function_type)(  ) ;
            
            PottsMesh3_exposer.def( 
                "Clear"
                , Clear_function_type(&::PottsMesh< 3 >::Clear)
                , default_Clear_function_type(&PottsMesh_less__3__greater__wrapper::default_Clear) );
        
        }
        { //::PottsMesh< 3 >::ConstructFromMeshReader
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef void ( exported_class_t::*ConstructFromMeshReader_function_type)( ::AbstractMeshReader< 3, 3 > & ) ;
            
            PottsMesh3_exposer.def( 
                "ConstructFromMeshReader"
                , ConstructFromMeshReader_function_type( &::PottsMesh< 3 >::ConstructFromMeshReader )
                , ( bp::arg("rMeshReader") ) );
        
        }
        { //::PottsMesh< 3 >::DeleteElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef void ( exported_class_t::*DeleteElement_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "DeleteElement"
                , DeleteElement_function_type( &::PottsMesh< 3 >::DeleteElement )
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::DeleteNode
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef void ( exported_class_t::*DeleteNode_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "DeleteNode"
                , DeleteNode_function_type( &::PottsMesh< 3 >::DeleteNode )
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::DivideElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*DivideElement_function_type)( ::PottsElement< 3 > *,bool ) ;
            
            PottsMesh3_exposer.def( 
                "DivideElement"
                , DivideElement_function_type( &::PottsMesh< 3 >::DivideElement )
                , ( bp::arg("pElement"), bp::arg("placeOriginalElementBelow")=(bool)(false) ) );
        
        }
        { //::PottsMesh< 3 >::GetCentroidOfElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetCentroidOfElement_function_type)( unsigned int ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( PottsMesh_less__3__greater__wrapper::*default_GetCentroidOfElement_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetCentroidOfElement"
                , GetCentroidOfElement_function_type(&::PottsMesh< 3 >::GetCentroidOfElement)
                , default_GetCentroidOfElement_function_type(&PottsMesh_less__3__greater__wrapper::default_GetCentroidOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::GetElementIteratorBegin
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::PottsMesh< 3 >::PottsElementIterator ( exported_class_t::*GetElementIteratorBegin_function_type)( bool ) ;
            
            PottsMesh3_exposer.def( 
                "GetElementIteratorBegin"
                , GetElementIteratorBegin_function_type( &::PottsMesh< 3 >::GetElementIteratorBegin )
                , ( bp::arg("skipDeletedElements")=(bool)(true) ) );
        
        }
        { //::PottsMesh< 3 >::GetElementIteratorEnd
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::PottsMesh< 3 >::PottsElementIterator ( exported_class_t::*GetElementIteratorEnd_function_type)(  ) ;
            
            PottsMesh3_exposer.def( 
                "GetElementIteratorEnd"
                , GetElementIteratorEnd_function_type( &::PottsMesh< 3 >::GetElementIteratorEnd ) );
        
        }
        { //::PottsMesh< 3 >::GetMooreNeighbouringNodeIndices
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetMooreNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetMooreNeighbouringNodeIndices"
                , GetMooreNeighbouringNodeIndices_function_type( &::PottsMesh< 3 >::GetMooreNeighbouringNodeIndices )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::PottsMesh< 3 >::GetNeighbouringElementIndices
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringElementIndices_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetNeighbouringElementIndices"
                , GetNeighbouringElementIndices_function_type( &::PottsMesh< 3 >::GetNeighbouringElementIndices )
                , ( bp::arg("elementIndex") ) );
        
        }
        { //::PottsMesh< 3 >::GetNumAllElements
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllElements_function_type)(  ) const;
            
            PottsMesh3_exposer.def( 
                "GetNumAllElements"
                , GetNumAllElements_function_type( &::PottsMesh< 3 >::GetNumAllElements ) );
        
        }
        { //::PottsMesh< 3 >::GetNumElements
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) const;
            typedef unsigned int ( PottsMesh_less__3__greater__wrapper::*default_GetNumElements_function_type)(  ) const;
            
            PottsMesh3_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type(&::PottsMesh< 3 >::GetNumElements)
                , default_GetNumElements_function_type(&PottsMesh_less__3__greater__wrapper::default_GetNumElements) );
        
        }
        { //::PottsMesh< 3 >::GetNumNodes
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) const;
            typedef unsigned int ( PottsMesh_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) const;
            
            PottsMesh3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::PottsMesh< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&PottsMesh_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::PottsMesh< 3 >::GetSurfaceAreaOfElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            typedef double ( PottsMesh_less__3__greater__wrapper::*default_GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetSurfaceAreaOfElement"
                , GetSurfaceAreaOfElement_function_type(&::PottsMesh< 3 >::GetSurfaceAreaOfElement)
                , default_GetSurfaceAreaOfElement_function_type(&PottsMesh_less__3__greater__wrapper::default_GetSurfaceAreaOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::GetVolumeOfElement
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfElement_function_type)( unsigned int ) ;
            typedef double ( PottsMesh_less__3__greater__wrapper::*default_GetVolumeOfElement_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetVolumeOfElement"
                , GetVolumeOfElement_function_type(&::PottsMesh< 3 >::GetVolumeOfElement)
                , default_GetVolumeOfElement_function_type(&PottsMesh_less__3__greater__wrapper::default_GetVolumeOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::GetVonNeumannNeighbouringNodeIndices
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetVonNeumannNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            PottsMesh3_exposer.def( 
                "GetVonNeumannNeighbouringNodeIndices"
                , GetVonNeumannNeighbouringNodeIndices_function_type( &::PottsMesh< 3 >::GetVonNeumannNeighbouringNodeIndices )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::PottsMesh< 3 >::RemoveDeletedElements
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveDeletedElements_function_type)(  ) ;
            
            PottsMesh3_exposer.def( 
                "RemoveDeletedElements"
                , RemoveDeletedElements_function_type( &::PottsMesh< 3 >::RemoveDeletedElements ) );
        
        }
        { //::PottsMesh< 3 >::SolveBoundaryElementMapping
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( PottsMesh_less__3__greater__wrapper::*SolveBoundaryElementMapping_function_type)( unsigned int ) const;
            
            PottsMesh3_exposer.def( 
                "SolveBoundaryElementMapping"
                , SolveBoundaryElementMapping_function_type( &PottsMesh_less__3__greater__wrapper::SolveBoundaryElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::SolveElementMapping
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( PottsMesh_less__3__greater__wrapper::*SolveElementMapping_function_type)( unsigned int ) const;
            
            PottsMesh3_exposer.def( 
                "SolveElementMapping"
                , SolveElementMapping_function_type( &PottsMesh_less__3__greater__wrapper::SolveElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::PottsMesh< 3 >::SolveNodeMapping
        
            typedef PottsMesh< 3 > exported_class_t;
            typedef unsigned int ( PottsMesh_less__3__greater__wrapper::*SolveNodeMapping_function_type)( unsigned int ) const;
            
            PottsMesh3_exposer.def( 
                "SolveNodeMapping"
                , SolveNodeMapping_function_type( &PottsMesh_less__3__greater__wrapper::default_SolveNodeMapping )
                , ( bp::arg("index") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< PottsMesh<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< PottsMesh< 3 > >, boost::shared_ptr< AbstractMesh< 3, 3 > > >();
    }

    { //::RegularGrid< 3, 3 >
        typedef bp::class_< RegularGrid< 3, 3 > > RegularGrid3_3_exposer_t;
        RegularGrid3_3_exposer_t RegularGrid3_3_exposer = RegularGrid3_3_exposer_t( "RegularGrid3_3", bp::init< >() );
        bp::scope RegularGrid3_3_scope( RegularGrid3_3_exposer );
        { //::RegularGrid< 3, 3 >::CalculateNeighbourData
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CalculateNeighbourData_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "CalculateNeighbourData"
                , CalculateNeighbourData_function_type( &::RegularGrid< 3, 3 >::CalculateNeighbourData ) );
        
        }
        { //::RegularGrid< 3, 3 >::Create
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< RegularGrid< 3, 3 > > ( *Create_function_type )(  );
            
            RegularGrid3_3_exposer.def( 
                "Create"
                , Create_function_type( &::RegularGrid< 3, 3 >::Create ) );
        
        }
        { //::RegularGrid< 3, 3 >::GenerateFromPart
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*GenerateFromPart_function_type)( ::boost::shared_ptr< Part< 3 > >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid3_3_exposer.def( 
                "GenerateFromPart"
                , GenerateFromPart_function_type( &::RegularGrid< 3, 3 >::GenerateFromPart )
                , ( bp::arg("pPart"), bp::arg("gridSize") ) );
        
        }
        { //::RegularGrid< 3, 3 >::Get1dGridIndex
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*Get1dGridIndex_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "Get1dGridIndex"
                , Get1dGridIndex_function_type( &::RegularGrid< 3, 3 >::Get1dGridIndex )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetExtents
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetExtents_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetExtents"
                , GetExtents_function_type( &::RegularGrid< 3, 3 >::GetExtents ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetLocation
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocation_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::RegularGrid< 3, 3 >::GetLocation )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetLocationOf1dIndex
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOf1dIndex_function_type)( unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetLocationOf1dIndex"
                , GetLocationOf1dIndex_function_type( &::RegularGrid< 3, 3 >::GetLocationOf1dIndex )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetLocations
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ( exported_class_t::*GetLocations_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetLocations"
                , GetLocations_function_type( &::RegularGrid< 3, 3 >::GetLocations ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetNearestGridIndex
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNearestGridIndex_function_type)( ::boost::numeric::ublas::c_vector< double, 3 > const & ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetNearestGridIndex"
                , GetNearestGridIndex_function_type( &::RegularGrid< 3, 3 >::GetNearestGridIndex )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetNeighbourData
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > const & ( exported_class_t::*GetNeighbourData_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetNeighbourData"
                , GetNeighbourData_function_type( &::RegularGrid< 3, 3 >::GetNeighbourData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3, 3 >::GetNumberOfPoints
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfPoints_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetNumberOfPoints"
                , GetNumberOfPoints_function_type( &::RegularGrid< 3, 3 >::GetNumberOfPoints ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetOrigin
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetOrigin_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetOrigin"
                , GetOrigin_function_type( &::RegularGrid< 3, 3 >::GetOrigin ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetPointCellMap
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<Cell> > > const & ( exported_class_t::*GetPointCellMap_function_type)( bool ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetPointCellMap"
                , GetPointCellMap_function_type( &::RegularGrid< 3, 3 >::GetPointCellMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3, 3 >::GetPointNodeMap
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > const & ( exported_class_t::*GetPointNodeMap_function_type)( bool ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetPointNodeMap"
                , GetPointNodeMap_function_type( &::RegularGrid< 3, 3 >::GetPointNodeMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3, 3 >::GetPointPointMap
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetPointPointMap_function_type)( ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetPointPointMap"
                , GetPointPointMap_function_type( &::RegularGrid< 3, 3 >::GetPointPointMap )
                , ( bp::arg("inputPoints") ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetPointSegmentMap
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > ( exported_class_t::*GetPointSegmentMap_function_type)( bool,bool ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetPointSegmentMap"
                , GetPointSegmentMap_function_type( &::RegularGrid< 3, 3 >::GetPointSegmentMap )
                , ( bp::arg("update")=(bool)(true), bp::arg("useVesselSurface")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetReferenceLengthScale
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::RegularGrid< 3, 3 >::GetReferenceLengthScale ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetSpacing
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetSpacing_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetSpacing"
                , GetSpacing_function_type( &::RegularGrid< 3, 3 >::GetSpacing ) );
        
        }
        { //::RegularGrid< 3, 3 >::GetVtkGrid
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkImageData > ( exported_class_t::*GetVtkGrid_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "GetVtkGrid"
                , GetVtkGrid_function_type( &::RegularGrid< 3, 3 >::GetVtkGrid ) );
        
        }
        { //::RegularGrid< 3, 3 >::InterpolateGridValues
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*InterpolateGridValues_function_type)( ::std::vector< boost::numeric::ublas::c_vector<double, 3> >,::std::vector< double >,bool ) ;
            
            RegularGrid3_3_exposer.def( 
                "InterpolateGridValues"
                , InterpolateGridValues_function_type( &::RegularGrid< 3, 3 >::InterpolateGridValues )
                , ( bp::arg("locations"), bp::arg("values"), bp::arg("useVtk")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 3, 3 >::IsLocationInPointVolume
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsLocationInPointVolume_function_type)( ::boost::numeric::ublas::c_vector< double, 3 >,unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "IsLocationInPointVolume"
                , IsLocationInPointVolume_function_type( &::RegularGrid< 3, 3 >::IsLocationInPointVolume )
                , ( bp::arg("point"), bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::IsOnBoundary
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 3, 3 >::IsOnBoundary )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::IsOnBoundary
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_3_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 3, 3 >::IsOnBoundary )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetCaBasedPopulation
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCaBasedPopulation_function_type)( ::boost::shared_ptr< CaBasedCellPopulation< 3 > > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetCaBasedPopulation"
                , SetCaBasedPopulation_function_type( &::RegularGrid< 3, 3 >::SetCaBasedPopulation )
                , ( bp::arg("pPopulation") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetCellPopulation
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::RegularGrid< 3, 3 >::SetCellPopulation )
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetExtents
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetExtents_function_type)( ::std::vector< unsigned int > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetExtents"
                , SetExtents_function_type( &::RegularGrid< 3, 3 >::SetExtents )
                , ( bp::arg("extents") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetOrigin
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOrigin_function_type)( ::boost::numeric::ublas::c_vector< double, 3 > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetOrigin"
                , SetOrigin_function_type( &::RegularGrid< 3, 3 >::SetOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetPointValues
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetPointValues_function_type)( ::std::vector< double > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetPointValues"
                , SetPointValues_function_type( &::RegularGrid< 3, 3 >::SetPointValues )
                , ( bp::arg("pointSolution") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetSpacing
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetSpacing_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetSpacing"
                , SetSpacing_function_type( &::RegularGrid< 3, 3 >::SetSpacing )
                , ( bp::arg("spacing") ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetUpVtkGrid
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUpVtkGrid_function_type)(  ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetUpVtkGrid"
                , SetUpVtkGrid_function_type( &::RegularGrid< 3, 3 >::SetUpVtkGrid ) );
        
        }
        { //::RegularGrid< 3, 3 >::SetVesselNetwork
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            RegularGrid3_3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::RegularGrid< 3, 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::RegularGrid< 3, 3 >::Write
        
            typedef RegularGrid< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            RegularGrid3_3_exposer.def( 
                "Write"
                , Write_function_type( &::RegularGrid< 3, 3 >::Write )
                , ( bp::arg("pFileHandler") ) );
        
        }
        RegularGrid3_3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< RegularGrid<3, 3> > >();
    }

    bp::class_< SharedPottsMeshGenerator_less__3__greater__wrapper >( "SharedPottsMeshGenerator3", bp::init< unsigned int, unsigned int, unsigned int, bp::optional< unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool, bool, bool, bool > >(( bp::arg("numNodesAcross"), bp::arg("numElementsAcross"), bp::arg("elementWidth"), bp::arg("numNodesUp")=(unsigned int)(1U), bp::arg("numElementsUp")=(unsigned int)(1U), bp::arg("elementHeight")=(unsigned int)(1U), bp::arg("numNodesDeep")=(unsigned int)(1U), bp::arg("numElementsDeep")=(unsigned int)(1U), bp::arg("elementDepth")=(unsigned int)(1U), bp::arg("startAtBottomLeft")=(bool)(false), bp::arg("isPeriodicInX")=(bool)(false), bp::arg("isPeriodicInY")=(bool)(false), bp::arg("isPeriodicInZ")=(bool)(false) )) )    
        .def( bp::init< >() )    
        .def( 
            "GetMesh"
            , (::boost::shared_ptr< PottsMesh< 3 > > ( ::SharedPottsMeshGenerator<3>::* )(  ))(&::SharedPottsMeshGenerator< 3 >::GetMesh)
            , (::boost::shared_ptr< PottsMesh< 3 > > ( SharedPottsMeshGenerator_less__3__greater__wrapper::* )(  ))(&SharedPottsMeshGenerator_less__3__greater__wrapper::default_GetMesh) );

    { //::Instantiation
    
        typedef int ( *Instantiation_function_type )(  );
        
        bp::def( 
            "Instantiation"
            , Instantiation_function_type( &::Instantiation ) );
    
    }
}
