// This file has been generated by Py++.

#include "boost/python.hpp"

#include "utility_headers.hpp"

namespace bp = boost::python;

struct DimensionalSimulationTime_wrapper : DimensionalSimulationTime, bp::wrapper< DimensionalSimulationTime > {

    DimensionalSimulationTime_wrapper( )
    : DimensionalSimulationTime( )
      , bp::wrapper< DimensionalSimulationTime >(){
        // null constructor
    
    }

};

struct ParameterCollection_wrapper : ParameterCollection, bp::wrapper< ParameterCollection > {

    ParameterCollection_wrapper( )
    : ParameterCollection( )
      , bp::wrapper< ParameterCollection >(){
        // null constructor
    
    }

};

struct SimulationTime_wrapper : SimulationTime, bp::wrapper< SimulationTime > {

    SimulationTime_wrapper( )
    : SimulationTime( )
      , bp::wrapper< SimulationTime >(){
        // null constructor
    
    }

};

BOOST_PYTHON_MODULE(_chaste_project_Angiogenesis_utility){
    { //::BaseParameterInstance
        typedef bp::class_< BaseParameterInstance > BaseParameterInstance_exposer_t;
        BaseParameterInstance_exposer_t BaseParameterInstance_exposer = BaseParameterInstance_exposer_t( "BaseParameterInstance", bp::init< >() );
        bp::scope BaseParameterInstance_scope( BaseParameterInstance_exposer );
        { //::BaseParameterInstance::GetBibliographicInformation
        
            typedef ::std::string ( ::BaseParameterInstance::*GetBibliographicInformation_function_type)(  ) ;
            
            BaseParameterInstance_exposer.def( 
                "GetBibliographicInformation"
                , GetBibliographicInformation_function_type( &::BaseParameterInstance::GetBibliographicInformation ) );
        
        }
        { //::BaseParameterInstance::GetName
        
            typedef ::std::string ( ::BaseParameterInstance::*GetName_function_type)(  ) ;
            
            BaseParameterInstance_exposer.def( 
                "GetName"
                , GetName_function_type( &::BaseParameterInstance::GetName ) );
        
        }
        { //::BaseParameterInstance::GetShortDescription
        
            typedef ::std::string ( ::BaseParameterInstance::*GetShortDescription_function_type)(  ) ;
            
            BaseParameterInstance_exposer.def( 
                "GetShortDescription"
                , GetShortDescription_function_type( &::BaseParameterInstance::GetShortDescription ) );
        
        }
        { //::BaseParameterInstance::SetBibliographicInformation
        
            typedef void ( ::BaseParameterInstance::*SetBibliographicInformation_function_type)( ::std::string const & ) ;
            
            BaseParameterInstance_exposer.def( 
                "SetBibliographicInformation"
                , SetBibliographicInformation_function_type( &::BaseParameterInstance::SetBibliographicInformation )
                , ( bp::arg("rSourceInformation") ) );
        
        }
        { //::BaseParameterInstance::SetName
        
            typedef void ( ::BaseParameterInstance::*SetName_function_type)( ::std::string const & ) ;
            
            BaseParameterInstance_exposer.def( 
                "SetName"
                , SetName_function_type( &::BaseParameterInstance::SetName )
                , ( bp::arg("rName") ) );
        
        }
        { //::BaseParameterInstance::SetShortDescription
        
            typedef void ( ::BaseParameterInstance::*SetShortDescription_function_type)( ::std::string const & ) ;
            
            BaseParameterInstance_exposer.def( 
                "SetShortDescription"
                , SetShortDescription_function_type( &::BaseParameterInstance::SetShortDescription )
                , ( bp::arg("rShortDescription") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< BaseParameterInstance > >();
    }

    { //::DimensionalSimulationTime
        typedef bp::class_< DimensionalSimulationTime_wrapper, boost::noncopyable > DimensionalSimulationTime_exposer_t;
        DimensionalSimulationTime_exposer_t DimensionalSimulationTime_exposer = DimensionalSimulationTime_exposer_t( "DimensionalSimulationTime", bp::no_init );
        bp::scope DimensionalSimulationTime_scope( DimensionalSimulationTime_exposer );
        DimensionalSimulationTime_exposer.def( bp::init< >() );
        { //::DimensionalSimulationTime::Destroy
        
            typedef void ( *Destroy_function_type )(  );
            
            DimensionalSimulationTime_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::DimensionalSimulationTime::Destroy ) );
        
        }
        { //::DimensionalSimulationTime::GetReferenceTimeScale
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::DimensionalSimulationTime::*GetReferenceTimeScale_function_type)(  ) ;
            
            DimensionalSimulationTime_exposer.def( 
                "GetReferenceTimeScale"
                , GetReferenceTimeScale_function_type( &::DimensionalSimulationTime::GetReferenceTimeScale ) );
        
        }
        { //::DimensionalSimulationTime::GetSimulationTime
        
            typedef ::boost::shared_ptr< SimulationTime > ( *GetSimulationTime_function_type )(  );
            
            DimensionalSimulationTime_exposer.def( 
                "GetSimulationTime"
                , GetSimulationTime_function_type( &::DimensionalSimulationTime::GetSimulationTime ) );
        
        }
        { //::DimensionalSimulationTime::Instance
        
            typedef ::boost::shared_ptr< DimensionalSimulationTime > ( *Instance_function_type )(  );
            
            DimensionalSimulationTime_exposer.def( 
                "Instance"
                , Instance_function_type( &::DimensionalSimulationTime::Instance ) );
        
        }
        { //::DimensionalSimulationTime::SetReferenceTimeScale
        
            typedef void ( ::DimensionalSimulationTime::*SetReferenceTimeScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DimensionalSimulationTime_exposer.def( 
                "SetReferenceTimeScale"
                , SetReferenceTimeScale_function_type( &::DimensionalSimulationTime::SetReferenceTimeScale )
                , ( bp::arg("referenceTimeScale") ) );
        
        }
        DimensionalSimulationTime_exposer.staticmethod( "Destroy" );
        DimensionalSimulationTime_exposer.staticmethod( "GetSimulationTime" );
        DimensionalSimulationTime_exposer.staticmethod( "Instance" );
        bp::register_ptr_to_python< boost::shared_ptr< DimensionalSimulationTime > >();
        bp::implicitly_convertible< boost::shared_ptr< DimensionalSimulationTime >, boost::shared_ptr< SerializableSingleton< DimensionalSimulationTime > > >();
    }

    { //::LengthParameterInstance
        typedef bp::class_< LengthParameterInstance, bp::bases< BaseParameterInstance > > LengthParameterInstance_exposer_t;
        LengthParameterInstance_exposer_t LengthParameterInstance_exposer = LengthParameterInstance_exposer_t( "LengthParameterInstance", bp::init< >() );
        bp::scope LengthParameterInstance_scope( LengthParameterInstance_exposer );
        { //::LengthParameterInstance::GetValue
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::LengthParameterInstance::*GetValue_function_type)(  ) ;
            
            LengthParameterInstance_exposer.def( 
                "GetValue"
                , GetValue_function_type( &::LengthParameterInstance::GetValue ) );
        
        }
        { //::LengthParameterInstance::SetValue
        
            typedef void ( ::LengthParameterInstance::*SetValue_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            LengthParameterInstance_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::LengthParameterInstance::SetValue )
                , ( bp::arg("value") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< LengthParameterInstance > >();
        bp::implicitly_convertible< boost::shared_ptr< LengthParameterInstance >, boost::shared_ptr< BaseParameterInstance > >();
    }

    { //::MassParameterInstance
        typedef bp::class_< MassParameterInstance, bp::bases< BaseParameterInstance > > MassParameterInstance_exposer_t;
        MassParameterInstance_exposer_t MassParameterInstance_exposer = MassParameterInstance_exposer_t( "MassParameterInstance", bp::init< >() );
        bp::scope MassParameterInstance_scope( MassParameterInstance_exposer );
        { //::MassParameterInstance::GetValue
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::MassParameterInstance::*GetValue_function_type)(  ) ;
            
            MassParameterInstance_exposer.def( 
                "GetValue"
                , GetValue_function_type( &::MassParameterInstance::GetValue ) );
        
        }
        { //::MassParameterInstance::SetValue
        
            typedef void ( ::MassParameterInstance::*SetValue_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MassParameterInstance_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::MassParameterInstance::SetValue )
                , ( bp::arg("value") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< MassParameterInstance > >();
        bp::implicitly_convertible< boost::shared_ptr< MassParameterInstance >, boost::shared_ptr< BaseParameterInstance > >();
    }

    { //::ParameterCollection
        typedef bp::class_< ParameterCollection_wrapper, boost::noncopyable > ParameterCollection_exposer_t;
        ParameterCollection_exposer_t ParameterCollection_exposer = ParameterCollection_exposer_t( "ParameterCollection", bp::no_init );
        bp::scope ParameterCollection_scope( ParameterCollection_exposer );
        ParameterCollection_exposer.def( bp::init< >() );
        { //::ParameterCollection::AddParameter
        
            typedef void ( ::ParameterCollection::*AddParameter_function_type)( ::boost::shared_ptr< BaseParameterInstance > ) ;
            
            ParameterCollection_exposer.def( 
                "AddParameter"
                , AddParameter_function_type( &::ParameterCollection::AddParameter )
                , ( bp::arg("pParameter") ) );
        
        }
        { //::ParameterCollection::Destroy
        
            typedef void ( *Destroy_function_type )(  );
            
            ParameterCollection_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::ParameterCollection::Destroy ) );
        
        }
        { //::ParameterCollection::DumpToFile
        
            typedef void ( ::ParameterCollection::*DumpToFile_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "DumpToFile"
                , DumpToFile_function_type( &::ParameterCollection::DumpToFile )
                , ( bp::arg("rFilename") ) );
        
        }
        { //::ParameterCollection::GetLengthParameter
        
            typedef ::boost::shared_ptr< LengthParameterInstance > ( ::ParameterCollection::*GetLengthParameter_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "GetLengthParameter"
                , GetLengthParameter_function_type( &::ParameterCollection::GetLengthParameter )
                , ( bp::arg("rName") ) );
        
        }
        { //::ParameterCollection::GetMassParameter
        
            typedef ::boost::shared_ptr< MassParameterInstance > ( ::ParameterCollection::*GetMassParameter_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "GetMassParameter"
                , GetMassParameter_function_type( &::ParameterCollection::GetMassParameter )
                , ( bp::arg("rName") ) );
        
        }
        { //::ParameterCollection::GetPressureParameter
        
            typedef ::boost::shared_ptr< PressureParameterInstance > ( ::ParameterCollection::*GetPressureParameter_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "GetPressureParameter"
                , GetPressureParameter_function_type( &::ParameterCollection::GetPressureParameter )
                , ( bp::arg("rName") ) );
        
        }
        { //::ParameterCollection::GetTimeParameter
        
            typedef ::boost::shared_ptr< TimeParameterInstance > ( ::ParameterCollection::*GetTimeParameter_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "GetTimeParameter"
                , GetTimeParameter_function_type( &::ParameterCollection::GetTimeParameter )
                , ( bp::arg("rName") ) );
        
        }
        { //::ParameterCollection::GetViscosityParameter
        
            typedef ::boost::shared_ptr< ViscosityParameterInstance > ( ::ParameterCollection::*GetViscosityParameter_function_type)( ::std::string const & ) ;
            
            ParameterCollection_exposer.def( 
                "GetViscosityParameter"
                , GetViscosityParameter_function_type( &::ParameterCollection::GetViscosityParameter )
                , ( bp::arg("rName") ) );
        
        }
        { //::ParameterCollection::Instance
        
            typedef ::boost::shared_ptr< ParameterCollection > ( *Instance_function_type )(  );
            
            ParameterCollection_exposer.def( 
                "Instance"
                , Instance_function_type( &::ParameterCollection::Instance ) );
        
        }
        ParameterCollection_exposer.staticmethod( "Destroy" );
        ParameterCollection_exposer.staticmethod( "Instance" );
        bp::register_ptr_to_python< boost::shared_ptr< ParameterCollection > >();
        bp::implicitly_convertible< boost::shared_ptr< ParameterCollection >, boost::shared_ptr< SerializableSingleton< ParameterCollection > > >();
    }

    { //::PressureParameterInstance
        typedef bp::class_< PressureParameterInstance, bp::bases< BaseParameterInstance > > PressureParameterInstance_exposer_t;
        PressureParameterInstance_exposer_t PressureParameterInstance_exposer = PressureParameterInstance_exposer_t( "PressureParameterInstance", bp::init< >() );
        bp::scope PressureParameterInstance_scope( PressureParameterInstance_exposer );
        { //::PressureParameterInstance::GetValue
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::PressureParameterInstance::*GetValue_function_type)(  ) ;
            
            PressureParameterInstance_exposer.def( 
                "GetValue"
                , GetValue_function_type( &::PressureParameterInstance::GetValue ) );
        
        }
        { //::PressureParameterInstance::SetValue
        
            typedef void ( ::PressureParameterInstance::*SetValue_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            PressureParameterInstance_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::PressureParameterInstance::SetValue )
                , ( bp::arg("value") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< PressureParameterInstance > >();
        bp::implicitly_convertible< boost::shared_ptr< PressureParameterInstance >, boost::shared_ptr< BaseParameterInstance > >();
    }

    { //::SimulationTime
        typedef bp::class_< SimulationTime_wrapper, boost::noncopyable > SimulationTime_exposer_t;
        SimulationTime_exposer_t SimulationTime_exposer = SimulationTime_exposer_t( "SimulationTime", bp::no_init );
        bp::scope SimulationTime_scope( SimulationTime_exposer );
        SimulationTime_exposer.def( bp::init< >() );
        { //::SimulationTime::Destroy
        
            typedef void ( *Destroy_function_type )(  );
            
            SimulationTime_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::SimulationTime::Destroy ) );
        
        }
        { //::SimulationTime::GetTime
        
            typedef double ( ::SimulationTime::*GetTime_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "GetTime"
                , GetTime_function_type( &::SimulationTime::GetTime ) );
        
        }
        { //::SimulationTime::GetTimeStep
        
            typedef double ( ::SimulationTime::*GetTimeStep_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "GetTimeStep"
                , GetTimeStep_function_type( &::SimulationTime::GetTimeStep ) );
        
        }
        { //::SimulationTime::GetTimeStepsElapsed
        
            typedef unsigned int ( ::SimulationTime::*GetTimeStepsElapsed_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "GetTimeStepsElapsed"
                , GetTimeStepsElapsed_function_type( &::SimulationTime::GetTimeStepsElapsed ) );
        
        }
        { //::SimulationTime::IncrementTimeOneStep
        
            typedef void ( ::SimulationTime::*IncrementTimeOneStep_function_type)(  ) ;
            
            SimulationTime_exposer.def( 
                "IncrementTimeOneStep"
                , IncrementTimeOneStep_function_type( &::SimulationTime::IncrementTimeOneStep ) );
        
        }
        { //::SimulationTime::IsEndTimeAndNumberOfTimeStepsSetUp
        
            typedef bool ( ::SimulationTime::*IsEndTimeAndNumberOfTimeStepsSetUp_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "IsEndTimeAndNumberOfTimeStepsSetUp"
                , IsEndTimeAndNumberOfTimeStepsSetUp_function_type( &::SimulationTime::IsEndTimeAndNumberOfTimeStepsSetUp ) );
        
        }
        { //::SimulationTime::IsFinished
        
            typedef bool ( ::SimulationTime::*IsFinished_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "IsFinished"
                , IsFinished_function_type( &::SimulationTime::IsFinished ) );
        
        }
        { //::SimulationTime::IsStartTimeSetUp
        
            typedef bool ( ::SimulationTime::*IsStartTimeSetUp_function_type)(  ) const;
            
            SimulationTime_exposer.def( 
                "IsStartTimeSetUp"
                , IsStartTimeSetUp_function_type( &::SimulationTime::IsStartTimeSetUp ) );
        
        }
        { //::SimulationTime::ResetEndTimeAndNumberOfTimeSteps
        
            typedef void ( ::SimulationTime::*ResetEndTimeAndNumberOfTimeSteps_function_type)( double const &,unsigned int const & ) ;
            
            SimulationTime_exposer.def( 
                "ResetEndTimeAndNumberOfTimeSteps"
                , ResetEndTimeAndNumberOfTimeSteps_function_type( &::SimulationTime::ResetEndTimeAndNumberOfTimeSteps )
                , ( bp::arg("rEndTime"), bp::arg("rNumberOfTimeStepsInThisRun") ) );
        
        }
        { //::SimulationTime::SetEndTimeAndNumberOfTimeSteps
        
            typedef void ( ::SimulationTime::*SetEndTimeAndNumberOfTimeSteps_function_type)( double,unsigned int ) ;
            
            SimulationTime_exposer.def( 
                "SetEndTimeAndNumberOfTimeSteps"
                , SetEndTimeAndNumberOfTimeSteps_function_type( &::SimulationTime::SetEndTimeAndNumberOfTimeSteps )
                , ( bp::arg("endTime"), bp::arg("totalTimeStepsInSimulation") ) );
        
        }
        { //::SimulationTime::SetStartTime
        
            typedef void ( ::SimulationTime::*SetStartTime_function_type)( double ) ;
            
            SimulationTime_exposer.def( 
                "SetStartTime"
                , SetStartTime_function_type( &::SimulationTime::SetStartTime )
                , ( bp::arg("startTime") ) );
        
        }
        SimulationTime_exposer.staticmethod( "Destroy" );
        bp::register_ptr_to_python< boost::shared_ptr< SimulationTime > >();
        bp::implicitly_convertible< boost::shared_ptr< SimulationTime >, boost::shared_ptr< SerializableSingleton< SimulationTime > > >();
    }

    { //::TimeParameterInstance
        typedef bp::class_< TimeParameterInstance, bp::bases< BaseParameterInstance > > TimeParameterInstance_exposer_t;
        TimeParameterInstance_exposer_t TimeParameterInstance_exposer = TimeParameterInstance_exposer_t( "TimeParameterInstance", bp::init< >() );
        bp::scope TimeParameterInstance_scope( TimeParameterInstance_exposer );
        { //::TimeParameterInstance::GetValue
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::TimeParameterInstance::*GetValue_function_type)(  ) ;
            
            TimeParameterInstance_exposer.def( 
                "GetValue"
                , GetValue_function_type( &::TimeParameterInstance::GetValue ) );
        
        }
        { //::TimeParameterInstance::SetValue
        
            typedef void ( ::TimeParameterInstance::*SetValue_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            TimeParameterInstance_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::TimeParameterInstance::SetValue )
                , ( bp::arg("value") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< TimeParameterInstance > >();
        bp::implicitly_convertible< boost::shared_ptr< TimeParameterInstance >, boost::shared_ptr< BaseParameterInstance > >();
    }

    bp::class_< UnitTester >( "UnitTester", bp::init< >() )    
        .def( 
            "GetMass"
            , (::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::UnitTester::* )(  ))( &::UnitTester::GetMass ) )    
        .def( 
            "SetMass"
            , (void ( ::UnitTester::* )( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::UnitTester::SetMass )
            , ( bp::arg("inputMass") ) );

    { //::ViscosityParameterInstance
        typedef bp::class_< ViscosityParameterInstance, bp::bases< BaseParameterInstance > > ViscosityParameterInstance_exposer_t;
        ViscosityParameterInstance_exposer_t ViscosityParameterInstance_exposer = ViscosityParameterInstance_exposer_t( "ViscosityParameterInstance", bp::init< >() );
        bp::scope ViscosityParameterInstance_scope( ViscosityParameterInstance_exposer );
        { //::ViscosityParameterInstance::GetValue
        
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::ViscosityParameterInstance::*GetValue_function_type)(  ) ;
            
            ViscosityParameterInstance_exposer.def( 
                "GetValue"
                , GetValue_function_type( &::ViscosityParameterInstance::GetValue ) );
        
        }
        { //::ViscosityParameterInstance::SetValue
        
            typedef void ( ::ViscosityParameterInstance::*SetValue_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ViscosityParameterInstance_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::ViscosityParameterInstance::SetValue )
                , ( bp::arg("value") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ViscosityParameterInstance > >();
        bp::implicitly_convertible< boost::shared_ptr< ViscosityParameterInstance >, boost::shared_ptr< BaseParameterInstance > >();
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > DimensionlessQuantity_exposer_t;
        DimensionlessQuantity_exposer_t DimensionlessQuantity_exposer = DimensionlessQuantity_exposer_t( "DimensionlessQuantity" );
        bp::scope DimensionlessQuantity_scope( DimensionlessQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > ViscosityQuantity_exposer_t;
        ViscosityQuantity_exposer_t ViscosityQuantity_exposer = ViscosityQuantity_exposer_t( "ViscosityQuantity" );
        bp::scope ViscosityQuantity_scope( ViscosityQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > PressureQuantity_exposer_t;
        PressureQuantity_exposer_t PressureQuantity_exposer = PressureQuantity_exposer_t( "PressureQuantity" );
        bp::scope PressureQuantity_scope( PressureQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -4, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -4, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > ImpedanceQuantity_exposer_t;
        ImpedanceQuantity_exposer_t ImpedanceQuantity_exposer = ImpedanceQuantity_exposer_t( "ImpedanceQuantity" );
        bp::scope ImpedanceQuantity_scope( ImpedanceQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > LengthQuantity_exposer_t;
        LengthQuantity_exposer_t LengthQuantity_exposer = LengthQuantity_exposer_t( "LengthQuantity" );
        bp::scope LengthQuantity_scope( LengthQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > FlowRateQuantity_exposer_t;
        FlowRateQuantity_exposer_t FlowRateQuantity_exposer = FlowRateQuantity_exposer_t( "FlowRateQuantity" );
        bp::scope FlowRateQuantity_scope( FlowRateQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > MassQuantity_exposer_t;
        MassQuantity_exposer_t MassQuantity_exposer = MassQuantity_exposer_t( "MassQuantity" );
        bp::scope MassQuantity_scope( MassQuantity_exposer );
    }

    { //::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >
        typedef bp::class_< boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > TimeQuantity_exposer_t;
        TimeQuantity_exposer_t TimeQuantity_exposer = TimeQuantity_exposer_t( "TimeQuantity" );
        bp::scope TimeQuantity_scope( TimeQuantity_exposer );
    }

    { //::boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >
        typedef bp::class_< boost::units::unit< boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void > > MassUnit_exposer_t;
        MassUnit_exposer_t MassUnit_exposer = MassUnit_exposer_t( "MassUnit" );
        bp::scope MassUnit_scope( MassUnit_exposer );
    }

    bp::class_< unit::kg_instance_t< true >, boost::noncopyable >( "kg", bp::no_init )    
        .def_readonly( "instance", &unit::kg_instance_t< true >::instance );
}
