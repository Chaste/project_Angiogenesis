// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "simulation_headers.hpp"

namespace bp = boost::python;

struct VascularTumourModifier_less__3__greater__wrapper : VascularTumourModifier< 3 >, bp::wrapper< VascularTumourModifier< 3 > > {

    VascularTumourModifier_less__3__greater__wrapper(VascularTumourModifier<3> const & arg )
    : VascularTumourModifier<3>( arg )
      , bp::wrapper< VascularTumourModifier< 3 > >(){
        // copy constructor
        
    }

    VascularTumourModifier_less__3__greater__wrapper( )
    : VascularTumourModifier<3>( )
      , bp::wrapper< VascularTumourModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->VascularTumourModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        VascularTumourModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->VascularTumourModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        VascularTumourModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->VascularTumourModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        VascularTumourModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< SimpleCellPopulation< 3 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_Angiogenesis_simulation){
    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::string > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > >() );
    }

    bp::class_< NodeBasedSimulationWrapper >( "NodeBasedSimulationWrapper", bp::init< >() )    
        .def( 
            "GetOutputPopulations"
            , (::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > ( ::NodeBasedSimulationWrapper::* )(  ))( &::NodeBasedSimulationWrapper::GetOutputPopulations ) )    
        .def( 
            "Run"
            , (void ( ::NodeBasedSimulationWrapper::* )(  ))( &::NodeBasedSimulationWrapper::Run ) )    
        .def( 
            "SetInputPopulation"
            , (void ( ::NodeBasedSimulationWrapper::* )( ::boost::shared_ptr< SimpleCellPopulation< 3 > > ))( &::NodeBasedSimulationWrapper::SetInputPopulation )
            , ( bp::arg("pInputPopulation") ) )    
        .def( 
            "SetNumberOfTimeSteps"
            , (void ( ::NodeBasedSimulationWrapper::* )( unsigned int ))( &::NodeBasedSimulationWrapper::SetNumberOfTimeSteps )
            , ( bp::arg("numberOfTimeSteps") ) )    
        .def( 
            "SetTimeStepSize"
            , (void ( ::NodeBasedSimulationWrapper::* )( double ))( &::NodeBasedSimulationWrapper::SetTimeStepSize )
            , ( bp::arg("stepSize") ) );

    bp::class_< OnLatticeSimulationWrapper >( "OnLatticeSimulationWrapper", bp::init< >() )    
        .def( 
            "GetOutputPopulations"
            , (::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > ( ::OnLatticeSimulationWrapper::* )(  ))( &::OnLatticeSimulationWrapper::GetOutputPopulations ) )    
        .def( 
            "SetAlphaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetAlphaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetBetaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetBetaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetCellPopulation"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< CaBasedCellPopulation< 3 > > ))( &::OnLatticeSimulationWrapper::SetCellPopulation )
            , ( bp::arg("pInputPopulation") ) )    
        .def( 
            "SetDt"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetDt )
            , ( bp::arg("timeStepSize") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNetwork"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< VesselNetwork< 3 > > ))( &::OnLatticeSimulationWrapper::SetNetwork )
            , ( bp::arg("pNetwork") ) )    
        .def( 
            "SetOerAlphaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerAlphaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerAlphaMin"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerAlphaMin )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerBetaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerBetaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerBetaMin"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerBetaMin )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerConstant"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerConstant )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::std::string const & ))( &::OnLatticeSimulationWrapper::SetOutputDirectory )
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "SetRadiotherapyDose"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetRadiotherapyDose )
            , ( bp::arg("dose") ) )    
        .def( 
            "SetRadiotherapyHitTimes"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::std::vector< double > ))( &::OnLatticeSimulationWrapper::SetRadiotherapyHitTimes )
            , ( bp::arg("hitTimes") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::OnLatticeSimulationWrapper::* )( unsigned int ))( &::OnLatticeSimulationWrapper::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingMultiple") ) )    
        .def( 
            "SetUseRadiotherapyCellKiller"
            , (void ( ::OnLatticeSimulationWrapper::* )( bool ))( &::OnLatticeSimulationWrapper::SetUseRadiotherapyCellKiller )
            , ( bp::arg("UseKiller") ) )    
        .def( 
            "SetVesselDistanceTolerance"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::OnLatticeSimulationWrapper::SetVesselDistanceTolerance )
            , ( bp::arg("tolerance") ) )    
        .def( 
            "Solve"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< VascularTumourModifier< 3 > > ))( &::OnLatticeSimulationWrapper::Solve )
            , ( bp::arg("pVtModifier") ) )    
        .def( 
            "UseOer"
            , (void ( ::OnLatticeSimulationWrapper::* )( bool ))( &::OnLatticeSimulationWrapper::UseOer )
            , ( bp::arg("useOer") ) );

    bp::class_< SimulationManager >( "SimulationManager", bp::init< >() )    
        .def( 
            "SetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationManager::* )( double,double ))( &::SimulationManager::SetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("endTime"), bp::arg("numberOfSteps") ) )    
        .def( 
            "Setup"
            , (void ( ::SimulationManager::* )(  ))( &::SimulationManager::Setup ) )    
        .def( 
            "TearDown"
            , (void ( ::SimulationManager::* )(  ))( &::SimulationManager::TearDown ) );

    { //::VascularTumourModifier< 3 >
        typedef bp::class_< VascularTumourModifier_less__3__greater__wrapper > VascularTumourModifier3_exposer_t;
        VascularTumourModifier3_exposer_t VascularTumourModifier3_exposer = VascularTumourModifier3_exposer_t( "VascularTumourModifier3", bp::init< >() );
        bp::scope VascularTumourModifier3_scope( VascularTumourModifier3_exposer );
        { //::VascularTumourModifier< 3 >::Create
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VascularTumourModifier< 3 > > ( *Create_function_type )(  );
            
            VascularTumourModifier3_exposer.def( 
                "Create"
                , Create_function_type( &::VascularTumourModifier< 3 >::Create ) );
        
        }
        { //::VascularTumourModifier< 3 >::OutputSimulationModifierParameters
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            typedef void ( VascularTumourModifier_less__3__greater__wrapper::*default_OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            
            VascularTumourModifier3_exposer.def( 
                "OutputSimulationModifierParameters"
                , OutputSimulationModifierParameters_function_type(&::VascularTumourModifier< 3 >::OutputSimulationModifierParameters)
                , default_OutputSimulationModifierParameters_function_type(&VascularTumourModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::VascularTumourModifier< 3 >::SetCellDataUpdateLabels
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellDataUpdateLabels_function_type)( ::std::vector< std::string > ) ;
            
            VascularTumourModifier3_exposer.def( 
                "SetCellDataUpdateLabels"
                , SetCellDataUpdateLabels_function_type( &::VascularTumourModifier< 3 >::SetCellDataUpdateLabels )
                , ( bp::arg("labels") ) );
        
        }
        { //::VascularTumourModifier< 3 >::SetVascularTumourSolver
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVascularTumourSolver_function_type)( ::boost::shared_ptr< VascularTumourSolver< 3 > > ) ;
            
            VascularTumourModifier3_exposer.def( 
                "SetVascularTumourSolver"
                , SetVascularTumourSolver_function_type( &::VascularTumourModifier< 3 >::SetVascularTumourSolver )
                , ( bp::arg("pSolver") ) );
        
        }
        { //::VascularTumourModifier< 3 >::SetupSolve
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            typedef void ( VascularTumourModifier_less__3__greater__wrapper::*default_SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            
            VascularTumourModifier3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type(&::VascularTumourModifier< 3 >::SetupSolve)
                , default_SetupSolve_function_type(&VascularTumourModifier_less__3__greater__wrapper::default_SetupSolve)
                , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) );
        
        }
        { //::VascularTumourModifier< 3 >::UpdateAtEndOfTimeStep
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( VascularTumourModifier_less__3__greater__wrapper::*default_UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            VascularTumourModifier3_exposer.def( 
                "UpdateAtEndOfTimeStep"
                , UpdateAtEndOfTimeStep_function_type(&::VascularTumourModifier< 3 >::UpdateAtEndOfTimeStep)
                , default_UpdateAtEndOfTimeStep_function_type(&VascularTumourModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::VascularTumourModifier< 3 >::UpdateCellData
        
            typedef VascularTumourModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            VascularTumourModifier3_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::VascularTumourModifier< 3 >::UpdateCellData )
                , ( bp::arg("rCellPopulation") ) );
        
        }
        VascularTumourModifier3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VascularTumourModifier<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< VascularTumourModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VascularTumourModifier< 3 > >, boost::shared_ptr< Identifiable > >();
    }

    { //::VascularTumourSolver< 3 >
        typedef bp::class_< VascularTumourSolver< 3 > > VascularTumourSolver3_exposer_t;
        VascularTumourSolver3_exposer_t VascularTumourSolver3_exposer = VascularTumourSolver3_exposer_t( "VascularTumourSolver3", bp::init< >() );
        bp::scope VascularTumourSolver3_scope( VascularTumourSolver3_exposer );
        { //::VascularTumourSolver< 3 >::AddDiscreteContinuumSolver
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddDiscreteContinuumSolver_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "AddDiscreteContinuumSolver"
                , AddDiscreteContinuumSolver_function_type( &::VascularTumourSolver< 3 >::AddDiscreteContinuumSolver )
                , ( bp::arg("pDiscreteContinuumSolver") ) );
        
        }
        { //::VascularTumourSolver< 3 >::Create
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VascularTumourSolver< 3 > > ( *Create_function_type )(  );
            
            VascularTumourSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::VascularTumourSolver< 3 >::Create ) );
        
        }
        { //::VascularTumourSolver< 3 >::GetDiscreteContinuumSolvers
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > ( exported_class_t::*GetDiscreteContinuumSolvers_function_type)(  ) ;
            
            VascularTumourSolver3_exposer.def( 
                "GetDiscreteContinuumSolvers"
                , GetDiscreteContinuumSolvers_function_type( &::VascularTumourSolver< 3 >::GetDiscreteContinuumSolvers ) );
        
        }
        { //::VascularTumourSolver< 3 >::Increment
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Increment_function_type)(  ) ;
            
            VascularTumourSolver3_exposer.def( 
                "Increment"
                , Increment_function_type( &::VascularTumourSolver< 3 >::Increment ) );
        
        }
        { //::VascularTumourSolver< 3 >::Run
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Run_function_type)(  ) ;
            
            VascularTumourSolver3_exposer.def( 
                "Run"
                , Run_function_type( &::VascularTumourSolver< 3 >::Run ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetAngiogenesisSolver
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAngiogenesisSolver_function_type)( ::boost::shared_ptr< AngiogenesisSolver< 3 > > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetAngiogenesisSolver"
                , SetAngiogenesisSolver_function_type( &::VascularTumourSolver< 3 >::SetAngiogenesisSolver )
                , ( bp::arg("pAngiogenesisSolver") ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetOutputFileHandler
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFileHandler_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetOutputFileHandler"
                , SetOutputFileHandler_function_type( &::VascularTumourSolver< 3 >::SetOutputFileHandler )
                , ( bp::arg("pFileHandler") ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetOutputFrequency
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFrequency_function_type)( unsigned int ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetOutputFrequency"
                , SetOutputFrequency_function_type( &::VascularTumourSolver< 3 >::SetOutputFrequency )
                , ( bp::arg("frequency") ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetRegressionSolver
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegressionSolver_function_type)( ::boost::shared_ptr< RegressionSolver< 3 > > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetRegressionSolver"
                , SetRegressionSolver_function_type( &::VascularTumourSolver< 3 >::SetRegressionSolver )
                , ( bp::arg("pRegressionSolver") ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetStructuralAdaptationSolver
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetStructuralAdaptationSolver_function_type)( ::boost::shared_ptr< StructuralAdaptationSolver< 3 > > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetStructuralAdaptationSolver"
                , SetStructuralAdaptationSolver_function_type( &::VascularTumourSolver< 3 >::SetStructuralAdaptationSolver )
                , ( bp::arg("pStructuralAdaptationSolver") ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetVesselNetwork
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::VascularTumourSolver< 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::VascularTumourSolver< 3 >::Setup
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Setup_function_type)(  ) ;
            
            VascularTumourSolver3_exposer.def( 
                "Setup"
                , Setup_function_type( &::VascularTumourSolver< 3 >::Setup ) );
        
        }
        { //::VascularTumourSolver< 3 >::SetupFromModifier
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetupFromModifier_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string const & ) ;
            
            VascularTumourSolver3_exposer.def( 
                "SetupFromModifier"
                , SetupFromModifier_function_type( &::VascularTumourSolver< 3 >::SetupFromModifier )
                , ( bp::arg("rCellPopulation"), bp::arg("rDirectory") ) );
        
        }
        { //::VascularTumourSolver< 3 >::UpdateCellData
        
            typedef VascularTumourSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::std::vector< std::string > ) ;
            
            VascularTumourSolver3_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::VascularTumourSolver< 3 >::UpdateCellData )
                , ( bp::arg("labels") ) );
        
        }
        VascularTumourSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VascularTumourSolver<3> > >();
    }
}
